import { describe, it, expect } from 'vitest'
import {
  buildMysqlDDL,
  buildPostgresDDL,
  buildSqlServerDDL,
  buildOracleDDL,
  buildOracleSynonyms,
  buildDCL,
  type NormalizedField,
  type IndexDefinition
} from '@/App'

describe('DDL Generation Functions', () => {
  const sampleFields: NormalizedField[] = [
    {
      name: 'id',
      type: 'int',
      comment: '主键ID',
      nullable: false,
      defaultKind: 'auto_increment',
      defaultValue: '',
      onUpdate: 'none',
    },
    {
      name: 'name',
      type: 'varchar(255)',
      comment: '名称',
      nullable: true,
      defaultKind: 'none',
      defaultValue: '',
      onUpdate: 'none',
    },
    {
      name: 'created_at',
      type: 'timestamp',
      comment: '创建时间',
      nullable: false,
      defaultKind: 'current_timestamp',
      defaultValue: '',
      onUpdate: 'none',
    },
    {
      name: 'price',
      type: 'decimal(10,2)',
      comment: '价格',
      nullable: true,
      defaultKind: 'constant',
      defaultValue: '0.00',
      onUpdate: 'none',
    },
  ]

  describe('buildMysqlDDL', () => {
    it('should generate basic MySQL DDL', () => {
      const result = buildMysqlDDL('users', '用户表', sampleFields)

      expect(result).toContain('CREATE TABLE users')
      expect(result).toContain("COMMENT='用户表'")
      expect(result).toContain('id INT AUTO_INCREMENT NOT NULL')
      expect(result).toContain("name VARCHAR(255) NULL COMMENT '名称'")
      expect(result).toContain('created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP')
      expect(result).toContain("price DECIMAL(10, 2) NULL DEFAULT 0.00 COMMENT '价格'")
    })

    it('should generate DDL for empty table name', () => {
      const result = buildMysqlDDL('', '用户表', sampleFields)
      expect(result).toContain('CREATE TABLE  (')
      expect(result).toContain("COMMENT='用户表'")
    })

    it('should handle empty fields', () => {
      const result = buildMysqlDDL('users', '用户表', [])
      expect(result).toContain('CREATE TABLE users')
      expect(result).toContain('COMMENT=\'用户表\'')
      expect(result).toContain(')')
    })

    it('should handle table comment without comment', () => {
      const result = buildMysqlDDL('users', '', sampleFields)
      expect(result).toContain('CREATE TABLE users')
      expect(result).not.toContain('COMMENT=')
    })
  })

  describe('buildPostgresDDL', () => {
    it('should generate PostgreSQL DDL', () => {
      const result = buildPostgresDDL('users', '用户表', sampleFields)

      expect(result).toContain('CREATE TABLE users')
      expect(result).toContain('id INTEGER GENERATED BY DEFAULT AS IDENTITY NOT NULL')
      expect(result).toContain('name VARCHAR(255)')
      expect(result).toContain('created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP')
      expect(result).toContain('price NUMERIC(10, 2) DEFAULT 0.00')
      expect(result).toContain("COMMENT ON TABLE users IS '用户表'")
      expect(result).toContain("COMMENT ON COLUMN users.name IS '名称'")
    })

    it('should handle qualified table names', () => {
      const result = buildPostgresDDL('public.users', '用户表', sampleFields)
      expect(result).toContain('CREATE TABLE public.users')
      expect(result).toContain('public.users.name')
    })
  })

  describe('buildSqlServerDDL', () => {
    it('should generate SQL Server DDL', () => {
      const result = buildSqlServerDDL('dbo.users', '用户表', sampleFields)

      expect(result).toContain('CREATE TABLE dbo.users')
      expect(result).toContain('id INT IDENTITY(1,1) NOT NULL')
      expect(result).toContain('name VARCHAR(255) NULL')
      expect(result).toContain('created_at DATETIME2 NOT NULL')
      expect(result).toContain('price DECIMAL(10, 2) NULL DEFAULT 0.00')
      expect(result).toContain("EXEC sp_addextendedproperty")
      expect(result).toContain("N'MS_Description'")
    })

    it('should handle schema-less table names', () => {
      const result = buildSqlServerDDL('users', '用户表', sampleFields)
      expect(result).toContain('CREATE TABLE users')
      expect(result).toContain('SCHEMA_NAME()')
    })
  })

  describe('buildOracleDDL', () => {
    it('should generate Oracle DDL with synonyms', () => {
      const result = buildOracleDDL('users', '用户表', sampleFields, true)

      expect(result).toContain('CREATE TABLE users')
      expect(result).toContain('id NUMBER(10) GENERATED BY DEFAULT AS IDENTITY NOT NULL')
      expect(result).toContain('name VARCHAR2(255)')
      expect(result).toContain('created_at TIMESTAMP DEFAULT SYSTIMESTAMP NOT NULL')
      expect(result).toContain('price NUMBER(10, 2) DEFAULT 0.00')
      expect(result).toContain("COMMENT ON TABLE users IS '用户表'")
      expect(result).toContain("COMMENT ON COLUMN users.name IS '名称'")
      expect(result).toContain('CREATE OR REPLACE PUBLIC SYNONYM users FOR users;')
    })

    it('should generate Oracle DDL without synonyms', () => {
      const result = buildOracleDDL('users', '用户表', sampleFields, false)

      expect(result).toContain('CREATE TABLE users')
      expect(result).not.toContain('CREATE OR REPLACE PUBLIC SYNONYM')
    })
  })

  describe('buildOracleSynonyms', () => {
    it('should generate PUBLIC synonym', () => {
      const result = buildOracleSynonyms('users')
      expect(result).toBe('CREATE OR REPLACE PUBLIC SYNONYM users FOR users;')
    })

    it('should handle qualified table names', () => {
      const result = buildOracleSynonyms('schema.users')
      expect(result).toBe('CREATE OR REPLACE PUBLIC SYNONYM schema.users FOR schema.users;')
    })

    it('should return empty string for invalid table name', () => {
      expect(buildOracleSynonyms('')).toBe('')
      expect(buildOracleSynonyms('   ')).toBe('')
    })
  })

  describe('buildDCL', () => {
    const authObjects = ['CBD_READ', 'CBD_RW', 'CBD_PROC']

    it('should generate Oracle DCL', () => {
      const result = buildDCL('oracle', 'users', authObjects)

      expect(result).toContain('GRANT SELECT ON users TO CBD_READ;')
      expect(result).toContain('GRANT SELECT ON users TO CBD_RW;')
      expect(result).toContain('GRANT SELECT ON users TO CBD_PROC;')
    })

    it('should generate MySQL DCL', () => {
      const result = buildDCL('mysql', 'users', authObjects)

      expect(result).toContain("GRANT SELECT ON users TO 'CBD_READ'@'%';")
      expect(result).toContain("GRANT SELECT ON users TO 'CBD_RW'@'%';")
      expect(result).toContain("GRANT SELECT ON users TO 'CBD_PROC'@'%';")
    })

    it('should generate PostgreSQL DCL', () => {
      const result = buildDCL('postgresql', 'users', authObjects)

      expect(result).toContain('GRANT SELECT ON users TO CBD_READ;')
      expect(result).toContain('GRANT SELECT ON users TO CBD_RW;')
      expect(result).toContain('GRANT SELECT ON users TO CBD_PROC;')
    })

    it('should generate SQL Server DCL', () => {
      const result = buildDCL('sqlserver', 'users', authObjects)

      expect(result).toContain('GRANT SELECT ON users TO CBD_READ;')
      expect(result).toContain('GRANT SELECT ON users TO CBD_RW;')
      expect(result).toContain('GRANT SELECT ON users TO CBD_PROC;')
    })

    it('should handle empty authorization objects', () => {
      const result = buildDCL('oracle', 'users', [])
      expect(result).toBe('')
    })

    it('should handle invalid table name', () => {
      const result = buildDCL('oracle', '', authObjects)
      expect(result).toBe('')
    })

    it('should filter empty authorization objects', () => {
      const result = buildDCL('oracle', 'users', ['CBD_READ', '', '  ', 'CBD_RW'])

      expect(result).toContain('GRANT SELECT ON users TO CBD_READ;')
      expect(result).toContain('GRANT SELECT ON users TO CBD_RW;')
      expect(result).not.toContain("GRANT SELECT ON users TO '';")
      expect(result).not.toContain("GRANT SELECT ON users TO '  ';")
    })
  })

  describe('Edge Cases', () => {
    it('should handle fields with special characters in comments', () => {
      const fieldsWithSpecialChars: NormalizedField[] = [
        {
          name: 'description',
          type: 'text',
          comment: "It's a test with 'quotes' and \\backslash\\",
          nullable: true,
          defaultKind: 'none',
          defaultValue: '',
          onUpdate: 'none',
        },
      ]

      const mysqlResult = buildMysqlDDL('test', 'Test Table', fieldsWithSpecialChars)
      expect(mysqlResult).toContain("COMMENT 'It''s a test with ''quotes'' and \\backslash\\'")

      const pgResult = buildPostgresDDL('test', 'Test Table', fieldsWithSpecialChars)
      expect(pgResult).toContain("IS 'It''s a test with ''quotes'' and \\backslash\\'")
    })

    it('should handle very long table names and comments', () => {
      const longName = 'a'.repeat(100)
      const longComment = 'b'.repeat(500)

      const result = buildMysqlDDL(longName, longComment, sampleFields)
      expect(result).toContain(`CREATE TABLE ${longName}`)
      expect(result).toContain(`COMMENT='${longComment}'`)
    })
  })
})