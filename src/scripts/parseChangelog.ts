import fs from 'fs'
import path from 'path'
import matter from 'gray-matter'

export interface ChangelogEntry {
  version: string
  date: string
  content: string
  title?: string
}

export interface ChangelogData {
  title: string
  description: string
  entries: ChangelogEntry[]
}

export function parseChangelog(): ChangelogData {
  const changelogPath = path.resolve(__dirname, '../../public/CHANGELOG.md')
  const fileContent = fs.readFileSync(changelogPath, 'utf8')

  const { data: frontMatter, content } = matter(fileContent)

  // Match version headers with regex
  const versionRegex = /^## \[([0-9.]+)\] - (.+)$/gm
  const matches = [...content.matchAll(versionRegex)]

  const entries: ChangelogEntry[] = []

  matches.forEach((match, index) => {
    const version = match[1]
    const date = match[2]

    // Find the content between this version and the next version
    const startIndex = match.index! + match[0].length
    const nextMatch = matches[index + 1]
    const endIndex = nextMatch ? nextMatch.index! : content.length

    let versionContent = content.substring(startIndex, endIndex).trim()

    entries.push({
      version,
      date,
      content: versionContent || '无更新内容'
    })
  })

  return {
    title: frontMatter.title || '更新日志',
    description: frontMatter.description || '',
    entries: entries.sort((a, b) => {
      // Sort by version descending (latest first)
      const aParts = a.version.split('.').map(Number)
      const bParts = b.version.split('.').map(Number)

      for (let i = 0; i < Math.max(aParts.length, bParts.length); i++) {
        const aVal = aParts[i] || 0
        const bVal = bParts[i] || 0
        if (aVal !== bVal) {
          return bVal - aVal
        }
      }
      return 0
    })
  }
}

// Generate TypeScript file
function generateChangelogData() {
  try {
    const changelogData = parseChangelog()
    const outputPath = path.resolve(__dirname, '../data/changelog.ts')

    const tsContent = `// This file is auto-generated by parseChangelog.ts
// Do not edit this file manually

export interface ChangelogEntry {
  version: string
  date: string
  content: string
  title?: string
}

export interface ChangelogData {
  title: string
  description: string
  entries: ChangelogEntry[]
}

export const changelogData: ChangelogData = ${JSON.stringify(changelogData, null, 2)} as ChangelogData
`

    // Ensure data directory exists
    const dataDir = path.dirname(outputPath)
    if (!fs.existsSync(dataDir)) {
      fs.mkdirSync(dataDir, { recursive: true })
    }

    fs.writeFileSync(outputPath, tsContent, 'utf8')
    console.log('✅ Changelog data generated successfully')
  } catch (error) {
    console.error('❌ Error generating changelog data:', error)
    process.exit(1)
  }
}

// Run if called directly
if (require.main === module) {
  generateChangelogData()
}