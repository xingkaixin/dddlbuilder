import type { NormalizedField, IndexDefinition } from "../types";
import {
  getCanonicalBaseType,
  supportsAutoIncrement,
  supportsDefaultCurrentTimestamp,
  supportsUuidDefault,
  formatConstantDefault,
  shouldQuoteDefault,
  isLikelyFunctionOrKeyword,
  escapeSingleQuotes,
  splitQualifiedName,
  parseFieldType,
} from "../utils/databaseTypeMapping";
import { AbstractDDLStrategy } from "./AbstractDDLStrategy";

export class PostgresStrategy extends AbstractDDLStrategy {
  getDatabaseType(): "postgresql" {
    return "postgresql";
  }

  generateTableDDL(
    tableName: string,
    tableComment: string,
    fields: NormalizedField[]
  ): string {
    const typeMapper = this.createTypeMapper();
    const columnLines = fields.map((field) => {
      const parsedType = parseFieldType(field.type);
      const type = typeMapper.mapType(parsedType);
      const base = getCanonicalBaseType(field.type);

      const identity =
        field.defaultKind === "auto_increment" &&
        supportsAutoIncrement("postgresql", base)
          ? " GENERATED BY DEFAULT AS IDENTITY"
          : "";

      const nullableClause = field.nullable ? "" : " NOT NULL";

      let def = "";
      if (field.defaultKind === "constant") {
        def = formatConstantDefault(base, field.defaultValue);
      } else if (
        field.defaultKind === "current_timestamp" &&
        supportsDefaultCurrentTimestamp("postgresql", base)
      ) {
        def = " DEFAULT CURRENT_TIMESTAMP";
      } else if (field.defaultKind === "uuid" && supportsUuidDefault(base)) {
        def = " DEFAULT gen_random_uuid()";
      }

      return `  ${this.formatFieldName(
        field.name
      )} ${type}${identity}${nullableClause}${def}`;
    });

    const qualifiedTableName = this.formatTableName(tableName);
    const statements: string[] = [
      `CREATE TABLE ${qualifiedTableName} (\n${columnLines.join(",\n")}\n);`,
    ];

    if (tableComment.trim()) {
      statements.push(
        `COMMENT ON TABLE ${qualifiedTableName} IS '${escapeSingleQuotes(
          tableComment.trim()
        )}';`
      );
    }

    statements.push(...this.generateColumnCommentsDDL(tableName, fields));

    return statements.join("\n");
  }
}